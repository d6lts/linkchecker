<?php
// $Id$

/**
 * @file
 * This module periodically check links in given node types, blocks, cck fields, etc.
 *
 * Developed by Alexander Hass, http://www.yaml-for-drupal.com/.
 */

/**
 * Implementation of hook_perm().
 */
function linkchecker_perm() {
  return array('access linkchecker', 'administer linkchecker');
}

/**
 * Implementation of hook_help().
 */
function linkchecker_help($section) {
  switch ($section) {
    case 'admin/help#linkchecker':
      $output = '<p>';
      $output .= t('This module provides an aid to finding broken links on your site. It periodically checks contents of all public nodes, tries to find any html links and check for their validity. It reports broken links through the admin interface. For more information about status codes see <a href="@rfc">Status Code Definitions</a>.', array('@rfc' => 'http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html'));
      $output .= '</p>';
      return $output;

    case 'admin/logs/linkchecker':
      $links_unchecked = db_result(db_query('SELECT count(lid) FROM {linkchecker_links} WHERE last_checked = %d', 0));
      if ($links_unchecked > 0) {
        $links_all = db_result(db_query('SELECT count(lid) FROM {linkchecker_links}'));
        drupal_set_message(strtr(format_plural($links_unchecked,
          'There is 1 unchecked link of about @links_all links in the database. Please be patient until all links have been checked via cron.',
          'There are @count unchecked links of about @links_all links in the database. Please be patient until all links have been checked via cron.'),
          array('@links_all' => $links_all)), 'warning');
      }
  }
}

/**
 * Implementation of hook_menu().
 */
function linkchecker_menu($may_cache) {
  $items = array();

  $items[] = array(
    'path' => 'admin/settings/linkchecker',
    'title' => t('Link checker'),
    'description' => t('Link checker configuration.'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('linkchecker_admin_settings_form'),
    'access' => user_access('administer linkchecker'),
   );
  $items[] = array(
    'path' => 'admin/logs/linkchecker',
    'title' => t('Broken links'),
    'description' => t('Shows a list of broken links in content.'),
    'callback' => 'linkchecker_admin_report',
    'access' => user_access('access linkchecker'),
  );
  return $items;
}

function linkchecker_admin_settings_form() {

  $form['settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('General settings'),
    '#collapsible' => FALSE,
  );
  $form['settings']['linkchecker_scan_nodetypes'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Scan node types for links'),
    '#default_value' => variable_get('linkchecker_scan_nodetypes', array()),
    '#options' => array_map('check_plain', node_get_types('names')),
    '#description' => t('Enable link checking for the selected node type(s).'),
  );

  $comment_dependencies = '<div class="admin-dependencies">';
  $comment_dependencies .= t('Depends on: !dependencies', array('!dependencies' => (module_exists('comment') ? t('@module (<span class="admin-enabled">enabled</span>)', array('@module' => 'Comment')) : t('@module (<span class="admin-disabled">disabled</span>)', array('@module' => 'Comment')))));
  $comment_dependencies .= '</div>';

  $form['settings']['linkchecker_scan_comments'] = array(
    '#default_value' => variable_get('linkchecker_scan_comments', 0),
    '#type' => 'checkbox',
    '#title' => t('Scan comments for links'),
    '#description' => t('Enable this checkbox if links in comments of the above selected node type(s) should be checked.') . $comment_dependencies,
    '#disabled' => module_exists('comment') ? FALSE : TRUE,
  );
  $form['settings']['linkchecker_scan_blocks'] = array(
    '#default_value' => variable_get('linkchecker_scan_blocks', 0),
    '#type' => 'checkbox',
    '#title' => t('Scan blocks for links'),
    '#description' => t('Enable this checkbox if links in blocks should be checked.')
  );
  $form['settings']['linkchecker_fqdn_only'] = array(
    '#default_value' => variable_get('linkchecker_fqdn_only', 1),
    '#type' => 'checkbox',
    '#title' => t('Check full qualified domain names only'),
    '#description' => t('Enable this checkbox if only full qualified URLs should be checked. If unchecked, all internal and external URLs will be checked.')
  );

  $pathfilter_dependencies = '<div class="admin-dependencies">';
  $pathfilter_dependencies .= t('Depends on: !dependencies', array('!dependencies' => (module_exists('pathfilter') ? t('@module (<span class="admin-enabled">enabled</span>)', array('@module' => 'Path Filter')) : t('@module (<span class="admin-disabled">disabled</span>)', array('@module' => 'Path Filter')))));
  $pathfilter_dependencies .= '</div>';

  $form['settings']['linkchecker_pathfilter_support'] = array(
    '#default_value' => variable_get('linkchecker_pathfilter_support', 0),
    '#type' => 'checkbox',
    '#title' => t('Pathfilter module support'),
    '#description' => t('Enable this checkbox for <a href="@pathfilter">pathfilter</a> module support.', array('@pathfilter' => 'http://drupal.org/project/pathfilter')) . $pathfilter_dependencies,
    '#disabled' => module_exists('pathfilter') ? FALSE : TRUE,
  );

  $form['check'] = array(
    '#type' => 'fieldset',
    '#title' => t('Check settings'),
    '#description' => t('For simultaneous link checks it is highly recommended to install the <a href="@curl">cURL</a> library. This may be <strong>necessary</strong> on larger sites with very many links, but may still improve (speed up), link checking performance on smaller sites.', array('@curl' => 'http://www.php.net/manual/en/book.curl.php')),
    '#collapsible' => FALSE,
  );
  $form['check']['linkchecker_check_useragent'] = array(
    '#type' => 'select',
    '#title' => t('User-Agent'),
    '#description' => t('Defines the user agent that will be used for checking links on remote sites. If someone blocks the standard Drupal user agent you can try with a more common browser.'),
    '#default_value' => variable_get('linkchecker_check_useragent', 'Drupal (+http://drupal.org/)'),
    '#options' => array(
      'Drupal (+http://drupal.org/)' => 'Drupal (+http://drupal.org/)',
      'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1;)' => 'Windows XP / Internet Explorer 7.0',
      'Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.9.0.5) Gecko/2008120122 Firefox/3.0.5' => 'Windows XP / Mozilla Firefox 3.0.5',
      'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0;)' => 'Windows Vista / Internet Explorer 7.0',
      'Mozilla/5.0 (Windows; U; Windows NT 6.0; de; rv:1.9.0.5) Gecko/2008120122 Firefox/3.0.5' => 'Windows Vista / Mozilla Firefox 3.0.5',
    ),
  );
  $form['check']['linkchecker_check_links_max'] = array(
    '#type' => 'select',
    '#title' => t('Check number of links per cron run'),
    '#description' => t('Defines the number of links that will be checked per cron run. The possible setting hardly depends on your PHP timeout value and remote servers speed and may increased if <a href="@curl">cURL</a> is installed and use simultaneous request checking. All cron jobs may fail, if this setting is too high!', array('@curl' => 'http://www.php.net/manual/en/book.curl.php')),
    '#default_value' => variable_get('linkchecker_check_links_max', 10),
    '#options' => drupal_map_assoc(array(5, 10, 25, 50, 100, 200, 250, 300, 350, 400, 450, 500, 750, 1000)),
  );
  $form['check']['linkchecker_check_links_interval'] = array(
    '#type' => 'select',
    '#title' => t('Check interval for links'),
    '#description' => t('This interval setting defines how often cron will re-check the status of links.'),
    '#default_value' => variable_get('linkchecker_check_links_interval', 2419200),
    '#options' => drupal_map_assoc(array(86400, 172800, 259200, 604800, 1209600, 2419200, 4838400), 'format_interval'),
  );
  $form['check']['linkchecker_cleanup_links_interval'] = array(
    '#type' => 'select',
    '#title' => t('Cleanup interval for unused links'),
    '#description' => t('This interval setting defines how often cron will clean up unused links.'),
    '#default_value' => variable_get('linkchecker_cleanup_links_interval', 604800),
    '#options' => drupal_map_assoc(array(86400, 172800, 259200, 604800, 1209600, 2419200, 4838400), 'format_interval'),
  );

  $form['error'] = array(
    '#type' => 'fieldset',
    '#title' => t('Error handling'),
    '#description' => t('Defines error handling and custom actions to be executed if specific HTTP requests are failing.'),
    '#collapsible' => FALSE,
  );
  $form['error']['linkchecker_action_status_code_301'] = array(
    '#title' => t('Update permanently moved links'),
    '#description' => t('If enabled, changed links providing a <em>Moved Permanently</em> (status code 301) are automatically updated. If used, it is recommended to use a value of <em>three</em> to make sure this is not only a temporarily change. This feature trust remote sites to provide a valid permanent redirect. Changes will be logged in <a href="@dblog">recent log entries</a>.', array('@dblog' => url('admin/logs/watchdog'))),
    '#type' => 'select',
    '#default_value' => variable_get('linkchecker_action_status_code_301', 0),
    '#options' => array(
      0 => t('Disabled'),
      1 => t('After one failed check'),
      2 => t('After two failed checks'),
      3 => t('After three failed checks'),
      5 => t('After five failed checks'),
      10 => t('After ten failed checks'),
    ),
  );
  $form['error']['linkchecker_action_status_code_404'] = array(
    '#title' => t('Unpublish node on file not found error'),
    '#description' => t('If enabled, a node with one or more broken links (status code 404) will be unpublished and moved to moderation queue for review after the number of specified fails. If used, it is recommended to use a value of <em>three</em> to make sure this is not only a temporarily error.'),
    '#type' => 'select',
    '#default_value' => variable_get('linkchecker_action_status_code_404', 0),
    '#options' => array(
      0 => t('Disabled'),
      1 => t('After one file not found error'),
      2 => t('After two file not found errors'),
      3 => t('After three file not found errors'),
      5 => t('After five file not found errors'),
      10 => t('After ten file not found errors'),
    ),
  );
  $form['error']['linkchecker_ignore_response_codes'] = array(
    '#default_value' => variable_get('linkchecker_ignore_response_codes', "200\n304\n401\n403"),
    '#type' => 'textarea',
    '#title' => t("Don't treat these response codes as errors"),
    '#description' => t('One HTTP status code per line, e.g. 403.'),
    '#wysiwyg' => FALSE,
  );

  // Buttons are only required for testing and debugging reasons.
  $description = '<p>' . t('Before using either of these options to clear link data, use the <em>Save configuration</em> button below to save any changes you may have made above.') . '</p>';
  $description .= '<p>' . t('These actions will either clear all link checker tables in the database and/or analyze all selected node types, blocks and cck fields (see settings above) for new/updated/removed links. Normally there is no need to press one of these buttons. Use this only for immediate cleanup tasks and to force a full re-build of the links to be checked in the linkchecker tables.') . '</p>';
  $description .= '<p>' . t('<strong>Note</strong>: These functions ONLY collect the links, they do not evaluate the HTTP response codes, this will be done during normal cron runs.') . '</p>';

  $form['clear'] = array(
    '#type' => 'fieldset',
    '#title' => t('Clear link data'),
    '#description' => $description,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['clear']['linkchecker_analyze'] = array(
    '#type' => 'submit',
    '#value' => t('Analyze content for links'),
  );
  $form['clear']['linkchecker_clear_analyze'] = array(
    '#type' => 'submit',
    '#value' => t('Clear link data and analyze content for links'),
  );

  return system_settings_form($form);
}

function linkchecker_admin_settings_form_validate($form_id, &$form_values) {
  $form_values['linkchecker_ignore_response_codes'] = trim($form_values['linkchecker_ignore_response_codes']);
  $ignore_response_codes = preg_split('/(\r\n?|\n)/', $form_values['linkchecker_ignore_response_codes']);
  foreach ($ignore_response_codes as $ignore_response_code) {
    if (!_linkchecker_isvalid_response_code($ignore_response_code)) {
      form_set_error('linkchecker_ignore_response_codes', t('Invalid response code %code found.', array('%code' => $ignore_response_code)));
    }
  }
}

function linkchecker_admin_settings_form_submit($form_id, $form_values) {

  // Submit handler per button workaround
  switch ($form_values['op']) {
    case t('Analyze content for links'):
      // Start batch and analyze all content.
      _linkchecker_batch_import();

      drupal_set_message(t('Content analysis has been queued for processing via cron.'));
      drupal_goto('admin/settings/linkchecker');
      break;

    case t('Clear link data and analyze content for links'):
      db_query("TRUNCATE TABLE {linkchecker_nodes}");
      db_query("TRUNCATE TABLE {linkchecker_comments}");
      db_query("TRUNCATE TABLE {linkchecker_boxes}");
      db_query("TRUNCATE TABLE {linkchecker_links}");
      db_query("DELETE FROM {sequences} WHERE name = '%s'", 'linkchecker_links_lid');

      // Start batch and analyze all content.
      _linkchecker_batch_import();

      drupal_set_message(t('Cleared link data and content analysis has been queued for processing via cron.'));
      drupal_goto('admin/settings/linkchecker');
      break;

    default:
      // Exclude unnecessary elements.
      unset($form_values['linkchecker_analyze'], $form_values['linkchecker_clear_analyze']);

      // Have node types or comment or block selection changed?
      $additional_nodetypes_selected = array_diff($form_values['linkchecker_scan_nodetypes'], variable_get('linkchecker_scan_nodetypes', array()));
      $linkchecker_scan_comments_changed = ($form_values['linkchecker_scan_comments'] > variable_get('linkchecker_scan_comments', 0)) ? TRUE : FALSE;
      $linkchecker_scan_blocks = ($form_values['linkchecker_scan_blocks'] > variable_get('linkchecker_scan_blocks', 0)) ? TRUE : FALSE;

      // Save form settings.
      system_settings_form_submit($form_id, $form_values);

      // Re-scan items, if node types or comment or block selection have been changed.
      if (!empty($additional_nodetypes_selected) || $linkchecker_scan_comments_changed) {
        $node_types = array_keys(array_filter($form_values['linkchecker_scan_nodetypes']));

        // If one or more node types have been selected.
        if (!empty($node_types)) {
          _linkchecker_batch_import_nodes($node_types);
          drupal_set_message(t('Node types analysis have been queued for processing via cron.'));

          // If comment scanning of node types has been selected.
          if ($linkchecker_scan_comments_changed) {
            _linkchecker_batch_import_comments($node_types);
            drupal_set_message(t('Comment analysis has been queued for processing via cron.'));
          }
        }
      }

      // If block scanning has been selected.
      if ($linkchecker_scan_blocks) {
        _linkchecker_batch_import_boxes();
        drupal_set_message(t('Block analysis has been queued for processing via cron.'));
      }
  }
}

/**
 * Trigger batch import job.
 */
function _linkchecker_batch_import() {
  // Start batch and analyze all nodes.
  $node_types = array_keys(array_filter(variable_get('linkchecker_scan_nodetypes', array())));
  if (!empty($node_types)) {
    _linkchecker_batch_import_nodes($node_types);
    if (variable_get('linkchecker_scan_comments', 0)) {
      _linkchecker_batch_import_comments($node_types);
    }
  }

  if (variable_get('linkchecker_scan_blocks', 0)) {
    _linkchecker_batch_import_boxes();
  }
}

/**
 * Batch: Load all nodes 100 by hundred.
 */
function _linkchecker_batch_import_nodes($node_types = array()) {
  // TODO: Add limitation setting and test with 500.000+ nodes and review memory consumption.
  $limit = 100;

  // Node import count.
  $placeholders = implode(',', array_fill(0, count($node_types), "'%s'"));
  $rows = db_result(db_query('SELECT COUNT(DISTINCT nid) FROM {node} WHERE status = %d AND type IN (' . $placeholders . ')', array_merge(array(1), $node_types)));

  for ($row = 0; $row<$rows; $row = $row+$limit) {
    job_queue_add('_linkchecker_batch_node_import_op', 'Scan nodes from row '. $row .' to ' . ($row+$limit) . '.', array($row, $limit, $node_types), '', TRUE);
  }
}

/**
 * Batch operation: Load all nodes, 100 by hundred.
 */
function _linkchecker_batch_node_import_op($row, $limit, $node_types) {

  // Retrieve the next group of records.
  $placeholders = implode(',', array_fill(0, count($node_types), "'%s'"));
  $result = db_query_range('SELECT nid FROM {node} WHERE status = %d AND type IN (' . $placeholders . ') ORDER BY nid ASC', array_merge(array(1), $node_types), $row, $limit);
  while ($res = db_fetch_array($result)) {
    // Load the node and scan for links.
    $node = node_load($res['nid'], NULL, TRUE);
    _linkchecker_add_node_links($node);
  }
}

/**
 * Batch: Load all comments 100 by hundred.
 */
function _linkchecker_batch_import_comments($node_types = array()) {
  // TODO: Add limitation setting and test with 500.000+ nodes and review memory consumption.
  $limit = 100;

  // Comment import count.
  $placeholders = implode(',', array_fill(0, count($node_types), "'%s'"));
  $rows = db_result(db_query('SELECT COUNT(DISTINCT cid) FROM {comments} c INNER JOIN {node} n ON c.nid = n.nid WHERE c.status <> %d AND n.status = %d AND n.type IN (' . $placeholders . ')', array_merge(array(COMMENT_NOT_PUBLISHED, 1), $node_types)));
  
  for ($row = 0; $row<$rows; $row = $row+$limit) {
    job_queue_add('_linkchecker_batch_comments_import_op', 'Scan comments from row '. $row .' to ' . ($row+$limit) . '.', array($row, $limit, $node_types), '', TRUE);
  }
}

/**
 * Batch operation: Load all comments, 100 by hundred.
 */
function _linkchecker_batch_comments_import_op($row, $limit, $node_types) {

  // Retrieve the next group of records.
  $placeholders = implode(',', array_fill(0, count($node_types), "'%s'"));
  $result = db_query_range('SELECT cid FROM {comments} c INNER JOIN {node} n ON c.nid = n.nid WHERE c.status <> %d AND n.status = %d AND n.type IN (' . $placeholders . ') ORDER BY cid ASC', array_merge(array(COMMENT_NOT_PUBLISHED, 1), $node_types), $row, $limit);
  while ($res = db_fetch_array($result)) {
    // Load the comment and scan for links.
    $comment = _linkchecker_comment_load($res['cid']);
    _linkchecker_add_comment_links($comment);
  }
}

/**
 * Batch operation: Load all boxes, 100 by 100.
 */
function _linkchecker_batch_import_comments_op($row, $limit) {
  // Retrieve the next group of bids.
  $result = db_query_range("SELECT bid FROM {boxes} ORDER BY bid ASC", $row, $limit);

  while ($res = db_fetch_array($result)) {
    // Load the comment and scan for links.
    $comment = _linkchecker_comment_load($res['cid']);
    _linkchecker_add_comment_links($comment);
  }
}

/**
 * Batch: Load all boxes 100 by hundred.
 */
function _linkchecker_batch_import_boxes() {
  // TODO: Add limitation setting and test with 500.000+ boxes and review memory consumption.
  $limit = 100;

  // Block import.
  $rows = db_result(db_query('SELECT COUNT(DISTINCT bid) FROM {boxes}'));
  for ($row = 0; $row<$rows; $row = $row+$limit) {
    job_queue_add('_linkchecker_batch_import_boxes_op', 'Scan boxes from row '. $row .' to ' . ($row+$limit) . '.', array($row, $limit), '', TRUE);
  }
}

/**
 * Batch operation: Load all boxes, 100 by 100.
 */
function _linkchecker_batch_import_boxes_op($row, $limit) {
  // Retrieve the next group of bids.
  $result = db_query_range("SELECT bid FROM {boxes} ORDER BY bid ASC", $row, $limit);

  while ($res = db_fetch_array($result)) {
    // Load the box and scan for links.
    $box = block_box_get($res['bid']);
    _linkchecker_add_box_links($box, $box['bid']);
  }
}

/**
 * Menu callback for reporting.
 */
function linkchecker_admin_report() {

  $header = array(
    array('data' => t('URL'), 'field' => 'url', 'sort' => 'desc'),
    array('data' => t('Response'), 'field' => 'code', 'sort' => 'desc'),
    array('data' => t('Error'), 'field' => 'error'),
    array('data' => t('Operations')),
  );

  // FIXME: If a link has been corrected it is nevertheless shown until cleanup job ran.
  $ignore_response_codes = preg_split('/(\r\n?|\n)/', variable_get('linkchecker_ignore_response_codes', "200\n304\n401\n403"));
  $placeholders = implode(',', array_fill(0, count($ignore_response_codes), '%d'));
  $result = pager_query("SELECT * FROM {linkchecker_links} WHERE last_checked <> %d AND code NOT IN (" . $placeholders . ")" . tablesort_sql($header), 50, 0, NULL, array_merge(array(0), $ignore_response_codes));

  $rows = array();
  while ($link = db_fetch_object($result)) {
    $links = array();

    // Show link to nodes having this broken link.
    $nodes = db_query('SELECT nid FROM {linkchecker_nodes} WHERE lid = %d', $link->lid);
    while ($node = db_fetch_object($nodes)) {
      $links[] = l(t('Edit node @node', array('@node' => $node->nid)), 'node/' . $node->nid . '/edit', array(), 'destination=admin/logs/linkchecker');
    }

    // Show link to comments having this broken link.
    $comments = db_query('SELECT cid FROM {linkchecker_comments} WHERE lid = %d', $link->lid);
    while ($comment = db_fetch_object($comments)) {
      $links[] = l(t('Edit comment @comment', array('@comment' => $comment->cid)), 'comment/edit/' . $comment->cid, array(), 'destination=admin/logs/linkchecker');
    }

    // Show link to blocks having this broken link.
    $boxes = db_query('SELECT bid FROM {linkchecker_boxes} WHERE lid = %d', $link->lid);
    while ($box = db_fetch_object($boxes)) {
      $links[] = l(t('Edit block @block', array('@block' => $box->bid)), 'admin/build/block/configure/block/' . $box->bid, array(), 'destination=admin/logs/linkchecker');
    }

    // Create table data for output.
    $rows[] = array(
      l(_filter_url_trim($link->url, 40), $link->url),
      $link->code,
      $link->error,
      implode('<br/>', $links),
    );
  }

  if (empty($rows)) {
    $rows[] = array(array('data' => t('No broken links have been found.'), 'colspan' => '4'));
  }

  $output  = theme('table', $header, $rows);
  $output .= theme('pager', NULL, 3000, 0);
  return $output;
}

/**
 * Implementation of hook_cron().
 */
function linkchecker_cron() {

  // Remove outdated links no longer in use.
  if (time() - variable_get('linkchecker_cleanup_links_last', 0) >= variable_get('linkchecker_cleanup_links_interval', 604800)) {
    _linkchecker_cleanup_links();
    variable_set('linkchecker_cleanup_links_last', time());
  }

  // TODO: Implement cURL support.
  //$has_curl = function_exists('curl_init');
  $check_links_max_per_cron_run = variable_get('linkchecker_check_links_max', 10);
  $check_links_interval = variable_get('linkchecker_check_links_interval', 2419200);
  $useragent = variable_get('linkchecker_check_useragent', 'Drupal (+http://drupal.org/)');

  // Get URLs for checking.
  $result = db_query_range("SELECT * FROM {linkchecker_links} WHERE last_checked < %d ORDER BY last_checked, lid ASC", time() - $check_links_interval, 0, $check_links_max_per_cron_run);
  while ($link = db_fetch_object($result)) {
    // Fetch URL.
    $response = drupal_http_request($link->url, array('User-Agent' => 'User-Agent: ' . $useragent), $link->method, NULL, 0);
    _linkchecker_status_handling($link, $response);
  }
}

/**
 * Status code handling.
 * 
 * @param $link
 *   An object containing the url, lid and fail_count.
 * 
 * @param $response
 *   An object containing the HTTP request headers, response code, headers,
 *   data and redirect status.
 */
function _linkchecker_status_handling($link, $response) {
  $useragent = variable_get('linkchecker_check_useragent', 'Drupal (+http://drupal.org/)');
  $ignore_response_codes = preg_split('/(\r\n?|\n)/', variable_get('linkchecker_ignore_response_codes', "200\n304\n401\n403"));

  // FIXME: drupal_http_request() may not provide an UTF8 encoded error message
  // what results in a database UPDATE failure. See http://drupal.org/node/371495
  // for more information. ISO-8859-1 as source encoding may be wrong, but WFM.
  if (!empty($response->error) && !drupal_validate_utf8($response->error)) {
    $response->error = drupal_convert_to_utf8($response->error, 'ISO-8859-1');
  }

  // Prevent E_ALL warnings for non-existing $response->error.
  if (!isset($response->error)) {
    $response->error = '';
  }

  switch ($response->code) {
    case 200:
    case 304:
      db_query("UPDATE {linkchecker_links} SET code = %d, error = '%s', fail_count = %d, last_checked = %d WHERE lid = %d", $response->code, $response->error, 0, time(), $link->lid);
      //watchdog('linkchecker', t('Checked %link successfully.', array('%link' => $link->url)));
      break;

    case 301:
      db_query("UPDATE {linkchecker_links} SET code = %d, error = '%s', fail_count = fail_count+1, last_checked = %d WHERE lid = %d", $response->code, $response->error, time(), $link->lid);

      // A HTTP status code of 301 tells us an existing link have changed to
      // a new link. The remote site owner was so kind to provide us the new
      // link and if we trust this change we are able to replace the old link
      // with the new one without any hand work.
      $auto_repair_301 = variable_get('linkchecker_action_status_code_301', 0);
      if ($auto_repair_301 && $auto_repair_301 <= ($link->fail_count+1) && $response->redirect_code == 200 && valid_url($response->redirect_url, TRUE)) {

        // NODES: Autorepair all nodes having this outdated link.
        $res = db_query("SELECT * FROM {linkchecker_nodes} WHERE lid = %d", $link->lid);
        while ($row = db_fetch_object($res)) {
          $node = node_load(array('nid' => $row->nid));

          // Create array of node fields to scan (for e.g. $node->title, $node->links_weblink_url).
          $text_items = array();
          $text_items[] = 'title';
          $text_items[] = 'body';

          // Update weblink nodes from 'links' module package.
          if (module_exists('links_weblink') && isset($node->links_weblink_url)) {
            $text_items[] = 'links_weblink_url';
          }

          // Now replace the outdated link with the permanently moved one in all node fields.
          foreach ($text_items as $text_item) {
            _linkchecker_link_replace($node->$text_item, $link->url, $response->redirect_url);
          }

          // Search for CCK-fields of types 'link' and 'text'.
          if (module_exists('content')) {
            $fields = content_fields(NULL, $node->type);
            foreach ($fields as $field) {
              if (isset($node->{$field['field_name']})) {
                if (module_exists('link') && $field['type'] == 'link') {
                  foreach ($node->$field['field_name'] as $delta => $item) {
                    _linkchecker_link_replace($node->{$field['field_name']}[$delta]['url'], $link->url, $response->redirect_url);
                  }
                }
                elseif (module_exists('text') && $field['type'] == 'text') {
                  foreach ($node->$field['field_name'] as $delta => $item) {
                    _linkchecker_link_replace($node->{$field['field_name']}[$delta]['value'], $link->url, $response->redirect_url);
                  }
                }
              }
            }
          }

          // Save changed node and update the node link list.
          node_save($node);
          // TODO: Logic could theoretically be optimized for more speed -> do
          // the link update only once and not after every changed link (minor).
          _linkchecker_add_node_links($node);
          watchdog('linkchecker', t('Changed permanently moved link in %node from %src to %dst.', array('%node' => url('node/' . $row->nid), '%src' => $link->url, '%dst' => $response->redirect_url)));
        }

        // COMMENTS: Autorepair all comments having this outdated link.
        if (module_exists('comment')) {
          $res = db_query("SELECT * FROM {linkchecker_comments} WHERE lid = %d", $link->lid);
          while ($row = db_fetch_object($res)) {
            $comment = _linkchecker_comment_load($row->cid);

            // Create array of node fields to scan (for e.g. $node->title, $node->links_weblink_url).
            $text_items = array();
            $text_items[] = 'subject';
            $text_items[] = 'comment';

            // Now replace the outdated link with the permanently moved one in all comment fields.
            foreach ($text_items as $text_item) {
              _linkchecker_link_replace($comment[$text_item], $link->url, $response->redirect_url);
            }

            // Save changed comment and update the comment link list.
            comment_save($comment);
            // TODO: Logic could theoretically be optimized for more speed -> do
            // the link update only once and not after every changed link (minor).
            _linkchecker_add_comment_links($comment);
            watchdog('linkchecker', t('Changed permanently moved link in comment %comment from %src to %dst.', array('%comment' => $comment['cid'], '%src' => $link->url, '%dst' => $response->redirect_url)));
          }
        }

        // BOXES: Autorepair all boxes having this outdated link.
        $res = db_query("SELECT * FROM {linkchecker_boxes} WHERE lid = %d", $link->lid);
        while ($row = db_fetch_object($res)) {
          $box = block_box_get($row->bid);

          // Create array of box fields to scan.
          $text_items = array();
          $text_items[] = 'info';
          $text_items[] = 'title';
          $text_items[] = 'body';

          // Now replace the outdated link with the permanently moved one in all box fields.
          foreach ($text_items as $text_item) {
            _linkchecker_link_replace($box[$text_item], $link->url, $response->redirect_url);
          }

          // Save changed node and update the node link list.
          block_box_save($box, $row->bid);
          // TODO: Logic could theoretically be optimized for more speed -> do
          // the link update only once and not after every changed link (minor).
          _linkchecker_add_box_links($box, $row->bid);
          watchdog('linkchecker', t('Changed permanently moved link in box %bid from %src to %dst.', array('%bid' => $row->bid, '%src' => $link->url, '%dst' => $response->redirect_url)));
        }

      }
      else {
        watchdog('linkchecker', t('Link %link has changed and needs to be updated.', array('%link' => $link->url)), WATCHDOG_NOTICE, l(t('Broken links'), 'admin/logs/linkchecker'));
      }
      break;

    case 404:
      db_query("UPDATE {linkchecker_links} SET code = %d, error = '%s', fail_count = fail_count+1, last_checked = %d WHERE lid = %d", $response->code, $response->error, time(), $link->lid);
      watchdog('linkchecker', t('Broken link %link has been found.', array('%link' => $link->url)), WATCHDOG_NOTICE, l(t('Broken links'), 'admin/logs/linkchecker'));

      // If unpublishing limit is reached, unpublish all nodes having this link.
      $linkchecker_action_status_code_404 = variable_get('linkchecker_action_status_code_404', 0);
      if ($linkchecker_action_status_code_404 && $linkchecker_action_status_code_404 <= ($link->fail_count+1)) {
        _linkchecker_unpublish_nodes($link->lid);
      }
      break;

    case 405:
      // Special error handling if method is not allowed. Switch link checking to GET method and try again.
      $response = drupal_http_request($link->url, array('User-Agent' => 'User-Agent: ' . $useragent), 'GET', NULL, 0);
      if ($response->code == 200) {
        db_query("UPDATE {linkchecker_links} SET code = %d, error = '%s', fail_count = %d, last_checked = %d, method = '%s' WHERE lid = %d", $response->code, $response->error, 0, time(), 'GET', $link->lid);
      }
      else {
        db_query("UPDATE {linkchecker_links} SET code = %d, error = '%s', fail_count = fail_count+1, last_checked = %d, method = '%s' WHERE lid = %d", $response->code, $response->error, time(), 'GET', $link->lid);
      }
      watchdog('linkchecker', t('Method HEAD is not allowed for link %link. Method has been changed to GET.', array('%link' => $link->url)), WATCHDOG_NOTICE, l(t('Broken links'), 'admin/logs/linkchecker'));
      break;

    default:
      // Don't treat ignored response codes as errors.
      if (in_array($response->code, $ignore_response_codes)) {
        db_query("UPDATE {linkchecker_links} SET code = %d, error = '%s', fail_count = %d, last_checked = %d WHERE lid = %d", $response->code, $response->error, 0, time(), $link->lid);
        //watchdog('linkchecker', t('Unhandled link error %link has been found.', array('%link' => $link->url)), WATCHDOG_ERROR, l(t('Broken links'), 'admin/logs/linkchecker'));
      }
      else {
        db_query("UPDATE {linkchecker_links} SET code = %d, error = '%s', fail_count = fail_count+1, last_checked = %d WHERE lid = %d", $response->code, $response->error, time(), $link->lid);
        //watchdog('linkchecker', t('Unhandled link error %link has been found.', array('%link' => $link->url)), WATCHDOG_ERROR, l(t('Broken links'), 'admin/logs/linkchecker'));
      }
  }

}

function linkchecker_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'insert':
    case 'update':
      // The node is going to be published.
      if (!$node->moderate && _linkchecker_scan_nodetype($node->type)) {
        _linkchecker_add_node_links($node);
      }
      break;

    case 'delete':
      _linkchecker_delete_node_links($node);
      break;

    case 'view':
      // Node edit tab is viewed.
      if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'edit') {
        // Show a message if a link check failed once or more.
        $ignore_response_codes = preg_split('/(\r\n?|\n)/', variable_get('linkchecker_ignore_response_codes', "200\n304\n401\n403"));
        $placeholders = implode(',', array_fill(0, count($ignore_response_codes), '%d'));
        $links = db_query("SELECT url, code, fail_count FROM {linkchecker_nodes} ln INNER JOIN {linkchecker_links} ll ON ln.lid = ll.lid WHERE ln.nid = %d AND ll.fail_count > %d AND ll.code NOT IN (" . $placeholders . ")", array_merge(array($node->nid, 0), $ignore_response_codes));
        while ($link = db_fetch_object($links)) {
          drupal_set_message(strtr(format_plural($link->fail_count, 'Link check of <a href="@url">@url</a> failed once (status code: @code).', 'Link check of <a href="@url">@url</a> failed @count times (status code: @code).'), array('@url' => $link->url, '@code' => $link->code)), 'warning');
        }
      }
      break;
  }
}

function linkchecker_comment($comment, $op) {
  // Convert $comment object (admin/content/comment) to array (comment/edit/[cid]).
  $comment = (array) $comment;

  switch ($op) {
    case 'insert':
    case 'update':
    case 'publish':
      $node_type = db_result(db_query("SELECT type FROM {node} WHERE nid = %d", $comment['nid']));
      // Use $comment['status'] to hack around comment_save() not hooking on publish (D5 only).
      if ($comment['status'] == COMMENT_PUBLISHED && _linkchecker_scan_nodetype($node_type)) {
        _linkchecker_add_comment_links($comment);
      }
      // Use $comment['status'] to hack around comment_save() not hooking on unpublish (D5 only).
      elseif ($comment['status'] == COMMENT_NOT_PUBLISHED) {
        _linkchecker_delete_comment_links($comment['cid']);
      }
      break;

    case 'unpublish':
    case 'delete':
      _linkchecker_delete_comment_links($comment['cid']);
      break;
  }
}

function linkchecker_form_alter($form_id, &$form) {
  switch ($form_id) {
    // Catch the block add/configure form and add custom submit handler.
    case 'block_box_form':
      // Add custom submit handler to block add form.
      $form['#submit']['linkchecker_block_add_form_submit'] = array();
      break;

    case 'block_admin_configure':
      // Add custom submit handler to block configuration form.
      $form['#submit']['linkchecker_block_configure_form_submit'] = array();
      break;

    case 'block_box_delete':
      // Add custom submit handler to block delete form.
      $form['#submit']['linkchecker_block_box_delete_form_submit'] = array();
      break;

    case 'comment_form':
      // Comment is edited.
      if (arg(0) == 'comment' && arg(1) == 'edit' && is_numeric(arg(2))) {
        // Show a message on comment edit page if a link check failed once or more.
        $ignore_response_codes = preg_split('/(\r\n?|\n)/', variable_get('linkchecker_ignore_response_codes', "200\n304\n401\n403"));
        $placeholders = implode(',', array_fill(0, count($ignore_response_codes), '%d'));
        $links = db_query("SELECT url, code, fail_count FROM {linkchecker_comments} lc INNER JOIN {linkchecker_links} ll ON lc.lid = ll.lid WHERE lc.cid = %d AND ll.fail_count > %d AND ll.code NOT IN (" . $placeholders . ")", array_merge(array(arg(2), 0), $ignore_response_codes));
        while ($link = db_fetch_object($links)) {
          drupal_set_message(strtr(format_plural($link->fail_count, 'Link check of <a href="@url">@url</a> failed once (status code: @code).', 'Link check of <a href="@url">@url</a> failed @count times (status code: @code).'), array('@url' => $link->url, '@code' => $link->code)), 'warning');
        }
      }
      break;

    default:
      break;
  }
}

/**
 * Custom submit handler for block add page.
 */
function linkchecker_block_add_form_submit($form_id, $form_values) {
  $bid = db_result(db_query("SELECT MAX(bid) FROM {boxes}"));
  _linkchecker_add_box_links($form_values, $bid);
}

/**
 * Custom submit handler for block configure page.
 */
function linkchecker_block_configure_form_submit($form_id, $form_values) {
  _linkchecker_add_box_links($form_values, $form_values['delta']);
}

/**
 * Custom submit handler for block delete page.
 */
function linkchecker_block_box_delete_form_submit($form_id, $form_values) {
  _linkchecker_delete_box_links($form_values['bid']);
}

/**
 * Add node links to database.
 */
function _linkchecker_add_node_links($node) {
  $scan_max_links_per_run = 100;

  // Create array of node fields to scan.
  $text_items = array();
  $text_items[] = $node->title;
  $text_items[] = $node->body;

  // Search for links in weblink nodes from 'links' module package.
  if (module_exists('links_weblink') && isset($node->links_weblink_url)) {
    $text_items[] = $node->links_weblink_url;
  }

  // Search for CCK-fields of types 'link' and 'text'.
  if (module_exists('content')) {
    $fields = content_fields(NULL, $node->type);
    foreach ($fields as $field) {
      if (isset($node->{$field['field_name']})) {
        if (module_exists('link') && $field['type'] == 'link') {
          foreach ($node->$field['field_name'] as $delta => $item) {
            $text_items[] = $item['url'];
          }
        }
        elseif (module_exists('text') && $field['type'] == 'text') {
          foreach ($node->$field['field_name'] as $delta => $item) {
            $text_items[] = $item['value'];
          }
        }
      }
    }
  }

  // Extract all links in a node.
  $links = _linkchecker_extract_links(implode(' ', $text_items));

  // Node have links.
  if (!empty($links)) {
    // Remove all links from the links array already in the database
    // and only add missing links to database.
    $new_links = _linkchecker_node_links_missing($node->nid, $links);

    // Add a job for scanning the next 100 links via job_queue module.
    $missing_links_count = count($new_links)-$scan_max_links_per_run;
    if (module_exists('job_queue') && $missing_links_count > $scan_max_links_per_run) {
      job_queue_add('_linkchecker_scan_node_links', 'Scan node '. $node->nid .' having '. $missing_links_count .' links not yet added to linkchecker_links table.', array($node->nid), '', FALSE);
    }

    // Only add links to database that do not exists.
    $i = 0;
    foreach ($new_links as $link) {
      $lid = db_result(db_query("SELECT lid FROM {linkchecker_links} WHERE token = '%s'", md5($link)));
      if (!$lid) {
        $lid = db_next_id('linkchecker_links_lid');
        db_query("INSERT INTO {linkchecker_links} (lid, token, url) VALUES (%d, '%s', '%s')", $lid, md5($link), $link);
      }
      db_query("INSERT INTO {linkchecker_nodes} (nid, lid) VALUES (%d, %d)", $node->nid, $lid);

      // Break processing if max links limit per run has been reached.
      $i++;
      if ($i >= $scan_max_links_per_run) { break; }
    }

    // Remove dead link references for cleanup reasons as very last step.
    _linkchecker_cleanup_node_references($node->nid, $links);
  }
}

/**
 * Add comment links to database.
 */
function _linkchecker_add_comment_links($comment) {
  $scan_max_links_per_run = 100;

  // Create array of comment fields to scan.
  $text_items = array();
  $text_items[] = $comment['subject'];
  $text_items[] = $comment['comment'];

  // Extract all links in a comment.
  $links = _linkchecker_extract_links(implode(' ', $text_items));

  // Comment have links.
  if (!empty($links)) {
    // Remove all links from the links array already in the database
    // and only add missing links to database.
    $new_links = _linkchecker_node_links_missing($comment['cid'], $links);

    // Add a job for scanning the next 100 links via job_queue module.
    $missing_links_count = count($new_links)-$scan_max_links_per_run;
    if (module_exists('job_queue') && $missing_links_count > $scan_max_links_per_run) {
      job_queue_add('_linkchecker_scan_comment_links', 'Scan comment '. $comment['cid'] .' having '. $missing_links_count .' links not yet added to linkchecker_links table.', array($comment['cid']), '', FALSE);
    }

    // Only add unique links to database that do not exist.
    $i = 0;
    foreach ($new_links as $link) {
      $lid = db_result(db_query("SELECT lid FROM {linkchecker_links} WHERE token = '%s'", md5($link)));
      if (!$lid) {
        $lid = db_next_id('linkchecker_links_lid');
        db_query("INSERT INTO {linkchecker_links} (lid, token, url) VALUES (%d, '%s', '%s')", $lid, md5($link), $link);
      }
      db_query("INSERT INTO {linkchecker_comments} (cid, lid) VALUES (%d, %d)", $comment['cid'], $lid);

      // Break processing if max links limit per run has been reached.
      $i++;
      if ($i >= $scan_max_links_per_run) { break; }
    }

    // Remove dead link references for cleanup reasons as very last step.
    _linkchecker_cleanup_comment_references($comment['cid'], $links);
  }  
}

/**
 * Add box links to database.
 */
function _linkchecker_add_box_links($box, $bid) {
  $scan_max_links_per_run = 100;

  // Create array of box fields to scan.
  $text_items = array();
  $text_items[] = $box['info'];
  $text_items[] = $box['title'];
  $text_items[] = $box['body'];

  // Extract all links in a box.
  $links = _linkchecker_extract_links(implode(' ', $text_items));

  // Box have links.
  if (!empty($links)) {
    // Remove all links from the links array already in the database
    // and only add missing links to database.
    $new_links = _linkchecker_box_links_missing($bid, $links);

    // Add a job for scanning the next 100 links via job_queue module.
    $missing_links_count = count($new_links)-$scan_max_links_per_run;
    if (module_exists('job_queue') && $missing_links_count > $scan_max_links_per_run) {
      job_queue_add('_linkchecker_scan_box_links', 'Scan block '. $bid .' having '. $missing_links_count .' links not yet added to linkchecker_links table.', array($bid), '', FALSE);
    }

    // Only add unique links to database that do not exist.
    $i = 0;
    foreach ($new_links as $link) {
      $lid = db_result(db_query("SELECT lid FROM {linkchecker_links} WHERE token = '%s'", md5($link)));
      if (!$lid) {
        $lid = db_next_id('linkchecker_links_lid');
        db_query("INSERT INTO {linkchecker_links} (lid, token, url) VALUES (%d, '%s', '%s')", $lid, md5($link), $link);
      }
      db_query("INSERT INTO {linkchecker_boxes} (bid, lid) VALUES (%d, %d)", $bid, $lid);

      // Break processing if max links limit per run has been reached.
      $i++;
      if ($i >= $scan_max_links_per_run) { break; }
    }

    // Remove dead link references for cleanup reasons as very last step.
    _linkchecker_cleanup_box_references($bid, $links);
  }  
}

/**
 * Remove all node references to links in the linkchecker_nodes table.
 */
function _linkchecker_delete_node_links($nid) {
  return db_query("DELETE FROM {linkchecker_nodes} WHERE nid = %d", $nid);
}

/**
 * Remove all comment references to links in the linkchecker_comments table.
 */
function _linkchecker_delete_comment_links($cid) {
  return db_query("DELETE FROM {linkchecker_comments} WHERE cid = %d", $cid);
}

/**
 * Remove all box references to links in the linkchecker_boxes table.
 */
function _linkchecker_delete_box_links($bid) {
  return db_query("DELETE FROM {linkchecker_boxes} WHERE bid = %d", $bid);
}

/**
 * Cleanup no longer used node references to links in the linkchecker_nodes table.
 */
function _linkchecker_cleanup_node_references($nid = 0, $links = array()) {
  $placeholders = implode(',', array_fill(0, count($links), "'%s'"));
  return db_query("DELETE FROM {linkchecker_nodes} WHERE nid = %d AND lid NOT IN (SELECT lid FROM {linkchecker_links} WHERE token IN (" . $placeholders . "))", array_merge(array($nid), array_map(md5, $links)));
}

/**
 * Cleanup no longer used comment references to links in the linkchecker_comments table.
 */
function _linkchecker_cleanup_comment_references($cid = 0, $links = array()) {
  $placeholders = implode(',', array_fill(0, count($links), "'%s'"));
  return db_query("DELETE FROM {linkchecker_comments} WHERE nid = %d AND lid NOT IN (SELECT lid FROM {linkchecker_links} WHERE token IN (" . $placeholders . "))", array_merge(array($cid), array_map(md5, $links)));
}

/**
 * Cleanup no longer used box references to links in the linkchecker_boxes table.
 */
function _linkchecker_cleanup_box_references($bid = 0, $links = array()) {
  $placeholders = implode(',', array_fill(0, count($links), "'%s'"));
  return db_query("DELETE FROM {linkchecker_boxes} WHERE bid = %d AND lid NOT IN (SELECT lid FROM {linkchecker_links} WHERE token IN (" . $placeholders . "))", array_merge(array($bid), array_map(md5, $links)));
}

/**
 * Returns an array of node references missing in the linkchecker_nodes table.
 */
function _linkchecker_node_links_missing($nid, $links) {
  $placeholders = implode(',', array_fill(0, count($links), "'%s'"));
  $res = db_query("SELECT url FROM {linkchecker_links} ll INNER JOIN {linkchecker_nodes} ln ON ll.lid = ln.lid WHERE ln.nid = %d AND token IN (" . $placeholders . ")", array_merge(array($nid), array_map(md5, $links)));
  $links_in_database = array();
  while ($row = db_fetch_object($res)) {
    $links_in_database[] = $row->url;
  }
  return array_diff($links, $links_in_database);
}

/**
 * Returns an array of comment references missing in the linkchecker_comments table.
 */
function _linkchecker_comment_links_missing($cid, $links) {
  $placeholders = implode(',', array_fill(0, count($links), "'%s'"));
  $res = db_query("SELECT url FROM {linkchecker_links} ll INNER JOIN {linkchecker_comments} lc ON ll.lid = lc.lid WHERE lc.cid = %d AND token IN (" . $placeholders . ")", array_merge(array($cid), array_map(md5, $links)));
  $links_in_database = array();
  while ($row = db_fetch_object($res)) {
    $links_in_database[] = $row->url;
  }
  return array_diff($links, $links_in_database);
}

/**
 * Returns an array of box references missing in the linkchecker_boxes table.
 */
function _linkchecker_box_links_missing($bid, $links) {
  $placeholders = implode(',', array_fill(0, count($links), "'%s'"));
  $res = db_query("SELECT url FROM {linkchecker_links} ll INNER JOIN {linkchecker_boxes} lb ON ll.lid = lb.lid WHERE lb.bid = %d AND token IN (" . $placeholders . ")", array_merge(array($bid), array_map(md5, $links)));
  $links_in_database = array();
  while ($row = db_fetch_object($res)) {
    $links_in_database[] = $row->url;
  }
  return array_diff($links, $links_in_database);
}

/**
 * Scan specified node for links. Helper function for job_queue scans.
 *
 * @param $nid
 *   The node id to scan.
 */
function _linkchecker_scan_node_links($nid) {
  $node = node_load(array('nid' => $nid));
  _linkchecker_add_node_links($node);
}

/**
 * Scan specified comment for links. Helper function for job_queue scans.
 *
 * @param $cid
 *   The comment id to scan.
 */
function _linkchecker_scan_comment_links($cid) {
  $comment = _linkchecker_comment_load($cid);
  _linkchecker_add_comment_links($comment);
}

/**
 * Scan specified box for links. Helper function for job_queue scans.
 *
 * @param $bid
 *   The box id to scan.
 */
function _linkchecker_scan_box_links($bid) {
  $box = block_box_get($bid);
  _linkchecker_add_box_links($box);
}

/**
 * Run perodically via cron and delete all links without a references.
 *
 * For speed reasons and check results we keep the links for some time
 * as they may be reused by other new content.
 */
function _linkchecker_cleanup_links() {
  // Remove disabled node types no longer in use.
  $node_types = array_keys(array_filter(variable_get('linkchecker_scan_nodetypes', array())));
  $placeholders = implode(',', array_fill(0, count($node_types), "'%s'"));
  if (!empty($node_types)) {
    db_query('DELETE FROM {linkchecker_nodes} WHERE nid IN (SELECT nid FROM {node} n WHERE n.type NOT IN (' . $placeholders . '))', $node_types);
    // FIXME: Remove comment references of unpublished nodes.
    //db_query('DELETE FROM {linkchecker_comments} WHERE cid IN (SELECT nid FROM {node} n WHERE n.type NOT IN (' . $placeholders . '))', $node_types);
  }
  else {
    db_query('DELETE FROM {linkchecker_nodes}');
    // FIXME: Remove comment references of unpublished nodes.
  }

  // Remove comment links if comment scanning is disabled.
  // TODO: Remove comment references of unpublished nodes.
  if (variable_get('linkchecker_scan_comments', 0) == 0) {
    db_query('DELETE FROM {linkchecker_comments}');
  }

  // Remove block links if block scanning is disabled.
  if (variable_get('linkchecker_scan_blocks', 0) == 0) {
    db_query('DELETE FROM {linkchecker_boxes}');
  }

  // TODO: Requires MySQL 5.x for subselects. Untested with pgsql.
  db_query('DELETE FROM {linkchecker_links}
            WHERE lid NOT IN (
              SELECT DISTINCT lid FROM {linkchecker_boxes}
              UNION ALL
              SELECT DISTINCT lid FROM {linkchecker_comments}
              UNION ALL
              SELECT DISTINCT lid FROM {linkchecker_nodes}
            )');

  watchdog('linkchecker', t('Wiped out obsolete links.'));
}

/**
 * Extract links from node content.
 */
function _linkchecker_extract_links($text = '') {

  // Try to find URLs and make them compatible with _linkchecker_extract_links regex.
  $text = _linkchecker_filter_url($text);

  // Finds any links in the content.
  $matches = array();
  preg_match_all("@
    <
    (a|area)
    \s
    (.(?!(href)))*?
    \s*
    (href\s*=\s*['\"]?
    ([^\'#\[%\">][^\'\">]*[^\'\"> ])
    \s*['\"]?)
  @ix", $text, $matches);

  $links = array();
  $ret = $matches[5];
  for ($i=0; isset($ret[$i]); $i++) {
    // Full qualified URLs.
    if (valid_url($ret[$i], TRUE)) {
      // Add to Array and change HTML links into plain text links.
      $links[] = decode_entities($ret[$i]);
    }
    // Local URLs.
    elseif (valid_url($ret[$i], FALSE)) {
      if (variable_get('linkchecker_fqdn_only', 1) == 0) {
        // Add to Array and change HTML links into plain text links.
        $links[] = decode_entities('http://'. $_SERVER['HTTP_HOST'] . $ret[$i]);
      }
    }
  }

  return array_unique($links);
}

/**
 * This is a customized clone of the core function _filter_url().
 */
function _linkchecker_filter_url($text = '') {

  $text = ' ' . $text . ' ';

  // Match pathfilter.module URLs prefixed with "internal:" and force them to be absolute for URL checking.
  if (module_exists('pathfilter') && variable_get('linkchecker_pathfilter_support', 0)) {
    $absolute = (variable_get('pathfilter_link_type', 'absolute') == 'absolute' ? 'TRUE' : 'FALSE');
    $text = preg_replace('/"internal:([^"#\?]+)\??([^"#]+)?#?([^"]+)?"/e', "'\"'. url('$1', array('query' => '$2' ? '$2' : NULL, 'fragment' => '$3' ? '$3' : NULL, 'absolute' => " . $absolute . ")) .'\"'", $text);
  }

  // Match absolute URLs.
  $text = preg_replace_callback("`(<p>|<li>|<br\s*/?>|[ \n\r\t\(])((http://|https://|ftp://|mailto:|smb://|afp://|file://|gopher://|news://|ssl://|sslv2://|sslv3://|tls://|tcp://|udp://)([a-zA-Z0-9@:%_+*~#?&=.,/;-]*[a-zA-Z0-9@:%_+*~#&=/;-]))([.,?!]*?)(?=(</p>|</li>|<br\s*/?>|[ \n\r\t\)]))`i", '_filter_url_parse_full_links', $text);

  // Match www domains/addresses.
  $text = preg_replace_callback("`(<p>|<li>|[ \n\r\t\(])(www\.[a-zA-Z0-9@:%_+*~#?&=.,/;-]*[a-zA-Z0-9@:%_+~#\&=/;-])([.,?!]*?)(?=(</p>|</li>|<br\s*/?>|[ \n\r\t\)]))`i", '_filter_url_parse_partial_links', $text);
  $text = substr($text, 1, -1);

  return $text;
}

/**
 * Replaces old link with new link in text.
 * 
 * @param $text
 *   The text a link is inside. Passed in as a reference.
 * @param $old_link
 *   The old link to search for.
 * @param $new_link
 *   The old link should be overwritten with this new link.
 * @return
 *   Text with replaced TRUE if the status code is valid.
 */
function _linkchecker_link_replace(&$text = '', $old_link = '', $new_link = '') {
  // Don't do any string replacement if one of the values is empty.
  if (!empty($text) && !empty($old_link) && !empty($new_link)) {
    $text = str_replace(check_url($old_link), check_url($new_link), $text);
    $text = str_replace($old_link, check_url($new_link), $text);
  }
}

/**
 * Defines the list of allowed response codes for form input validation.
 * 
 * @param $code
 *   An numeric response code.
 * @return
 *   TRUE if the status code is valid.
 */
function _linkchecker_isvalid_response_code($code) {

  $responses = array(
    100 => 'Continue',
    101 => 'Switching Protocols',
    200 => 'OK',
    201 => 'Created',
    202 => 'Accepted',
    203 => 'Non-Authoritative Information',
    204 => 'No Content',
    205 => 'Reset Content',
    206 => 'Partial Content',
    300 => 'Multiple Choices',
    301 => 'Moved Permanently',
    302 => 'Found',
    303 => 'See Other',
    304 => 'Not Modified',
    305 => 'Use Proxy',
    307 => 'Temporary Redirect',
    400 => 'Bad Request',
    401 => 'Unauthorized',
    402 => 'Payment Required',
    403 => 'Forbidden',
    404 => 'Not Found',
    405 => 'Method Not Allowed',
    406 => 'Not Acceptable',
    407 => 'Proxy Authentication Required',
    408 => 'Request Time-out',
    409 => 'Conflict',
    410 => 'Gone',
    411 => 'Length Required',
    412 => 'Precondition Failed',
    413 => 'Request Entity Too Large',
    414 => 'Request-URI Too Large',
    415 => 'Unsupported Media Type',
    416 => 'Requested range not satisfiable',
    417 => 'Expectation Failed',
    500 => 'Internal Server Error',
    501 => 'Not Implemented',
    502 => 'Bad Gateway',
    503 => 'Service Unavailable',
    504 => 'Gateway Time-out',
    505 => 'HTTP Version not supported',
  );

  return array_key_exists($code, $responses);
}

/**
 * Should the defined node type scanned for links?
 * 
 * @param $node_type
 *   Verifies if the node type is enabled for link checks and should be scanned.
 * @return
 *   TRUE if node type should be scanned, otherwise FALSE.
 */
function _linkchecker_scan_nodetype($node_type = NULL) {

  $enabled = FALSE;
  $node_types = array_keys(array_filter(variable_get('linkchecker_scan_nodetypes', array())));

  // Scan specific node types only.
  if (in_array($node_type, $node_types)) {
    $enabled = TRUE;
  }

  return $enabled;
}

/**
 * Unpublishes all nodes having the specified link id.
 * 
 * @param $lid
 *   A link ID that have reached a defined failcount.
 */
function _linkchecker_unpublish_nodes($lid) {
  $res = db_query("SELECT * FROM {linkchecker_nodes} WHERE lid = %d", $lid);
  while ($row = db_fetch_object($res)) {
    $node = node_load(array('nid' => $row->nid));
    $node->status = 0;
    node_save($node);
    watchdog('linkchecker', t('Set @type %title to unpublished.', array('@type' => $node->type, '%title' => $node->title)));

    // TODO: Add email notification for authors.
  }
}

/**
 * Load comment as array.
 */
function _linkchecker_comment_load($cid) {
  return db_fetch_array(db_query('SELECT * FROM {comments} WHERE cid = %d', $cid));
}
