<?php
// $Id$

/**
 * @file
 * Installation file for Link Checker module.
 */

define('LINKCHECKER_MINIMUM_MYSQL', '5.0');

/**
 * Implementation of hook_install().
 */
function linkchecker_install() {

  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      db_query("CREATE TABLE {linkchecker_boxes} (
        bid INT unsigned NOT NULL,
        lid INT unsigned NOT NULL,
        PRIMARY KEY (bid, lid)
      ) /*!40100 DEFAULT CHARACTER SET utf8 */;");
      db_query("CREATE TABLE {linkchecker_nodes} (
        nid INT unsigned NOT NULL,
        lid INT unsigned NOT NULL,
        PRIMARY KEY (nid, lid)
      ) /*!40100 DEFAULT CHARACTER SET utf8 */;");
      db_query("CREATE TABLE {linkchecker_comments} (
        cid INT unsigned NOT NULL,
        lid INT unsigned NOT NULL,
        PRIMARY KEY (cid ,lid)
      ) /*!40100 DEFAULT CHARACTER SET utf8 */;");
      db_query("CREATE TABLE {linkchecker_links} (
        lid INT unsigned NOT NULL,
        token VARCHAR(32) NOT NULL,
        url TEXT NOT NULL,
        method varchar(4) NOT NULL default 'HEAD',
        code INT NOT NULL default '-1',
        error TEXT,
        fail_count INT NOT NULL default '0',
        last_checked INT NOT NULL default '0',
        status INT NOT NULL default '1',
        PRIMARY KEY (lid),
        UNIQUE KEY token (token)
      ) /*!40100 DEFAULT CHARACTER SET utf8 */;");
      break;

    // PgSQL is untested!
    case 'pgsql':
      db_query("CREATE TABLE {linkchecker_boxes} (
        bid int_unsigned NOT NULL,
        lid int_unsigned NOT NULL,
        PRIMARY KEY (bid, lid)
      );");
      db_query("CREATE TABLE {linkchecker_nodes} (
        nid int_unsigned NOT NULL,
        lid int_unsigned NOT NULL,
        PRIMARY KEY (nid, lid)
      );");
      db_query("CREATE TABLE {linkchecker_comments} (
        cid int_unsigned NOT NULL,
        lid int_unsigned NOT NULL,
        PRIMARY KEY (cid, lid)
      );");
      db_query("CREATE TABLE {linkchecker_links} (
        lid int_unsigned NOT NULL,  
        token VARCHAR(32) NOT NULL,
        url TEXT NOT NULL,
        method VARCHAR(4) NOT NULL default 'HEAD',
        code INTEGER NOT NULL default '-1',
        error TEXT,
        fail_count INTEGER NOT NULL default '0',
        last_checked INTEGER NOT NULL default '0',
        status INT NOT NULL default '1',
        PRIMARY KEY (lid),
        UNIQUE (token)
      );");
      break;
  }

}

/**
 * Implementation of hook_uninstall().
 */
function linkchecker_uninstall() {
  db_query("DROP TABLE {linkchecker_boxes}");
  db_query("DROP TABLE {linkchecker_nodes}");
  db_query("DROP TABLE {linkchecker_comments}");
  db_query("DROP TABLE {linkchecker_links}");

  variable_del('linkchecker_action_status_code_301');
  variable_del('linkchecker_action_status_code_404');
  variable_del('linkchecker_check_links_interval');
  variable_del('linkchecker_check_links_max');
  variable_del('linkchecker_check_useragent');
  variable_del('linkchecker_cleanup_links_interval');
  variable_del('linkchecker_cleanup_links_last');
  variable_del('linkchecker_extract_from_a');
  variable_del('linkchecker_extract_from_embed');
  variable_del('linkchecker_extract_from_img');
  variable_del('linkchecker_extract_from_iframe');
  variable_del('linkchecker_extract_object');
  variable_del('linkchecker_fqdn_only');
  variable_del('linkchecker_ignore_response_codes');
  variable_del('linkchecker_pathfilter_support');
  variable_del('linkchecker_scan_blocks');
  variable_del('linkchecker_scan_comments');
  variable_del('linkchecker_scan_nodetypes');
}

/**
 * Implementation of hook_requirements().
 */
function linkchecker_requirements($phase) {
  $requirements = array();
  $t = get_t();

  switch ($phase) {
    case 'install' :
/*      // Module cannot work without external HTTP requests.
      if (variable_get('drupal_http_request_fails', FALSE)) {
        $requirements['http requests'] = array(
          'title' => $t('HTTP request status'),
          'value' => $t('Fails'),
          'severity' => REQUIREMENT_ERROR,
          'description' => $t('Your system or network configuration does not allow Drupal to access web pages, resulting in reduced functionality. This could be due to your webserver configuration or PHP settings, and should be resolved in order to download information about available updates, fetch aggregator feeds, sign in via OpenID, or use other network-dependent services.'),
        );
      } */

      // MySQL version with subselect support is required.
      $version = db_version();
      if (in_array($GLOBALS['db_type'], array('mysql', 'mysqli')) && version_compare($version, LINKCHECKER_MINIMUM_MYSQL) < 0) {
        $requirements['linkchecker_minimum_mysql'] = array(
          'title' => $t('MySQL database'),
          'value' => $version,
          'severity' => REQUIREMENT_ERROR,
          'description' => $t('Your MySQL Server is too old. Link Checker requires at least MySQL %version.', array('%version' => LINKCHECKER_MINIMUM_MYSQL)),
        );
      }
      break;

/*    case 'runtime':
      $requirements['linkchecker_curl'] = array(
        'title' => $t('cURL'),
        'value' => $has_curl ? $t('Enabled') : $t('Not found'),
        'severity' => $has_curl ? REQUIREMENT_OK : REQUIREMENT_WARNING,
        'description' => $t('You should install cURL for checking links with link checker module. If cURL is installed, simultaneuos link checks are used to speeds up the link checking process dramatically.'),
      );
      break; */
  }
  return $requirements;
}

/**
 * Upgrade module to new schema.
 */
function linkchecker_update_5200() {
  $ret = array();

  // Module functions are required. Make sure the module is loaded.
  drupal_load('module', 'linkchecker');

  // Remove obsolete tables no longer required.
  $ret[] = update_sql("DROP TABLE {linkchecker_tasks}");
  $ret[] = update_sql("DROP TABLE {linkchecker_results}");

  // Create new tables.
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("CREATE TABLE {linkchecker_boxes} (
        bid INT NOT NULL,
        lid INT NOT NULL,
        PRIMARY KEY (bid, lid)
      ) /*!40100 DEFAULT CHARACTER SET utf8 */;");
      $ret[] = update_sql("CREATE TABLE {linkchecker_nodes} (
        nid INT NOT NULL,
        lid INT NOT NULL,
        PRIMARY KEY (nid, lid)
      ) /*!40100 DEFAULT CHARACTER SET utf8 */;");
      $ret[] = update_sql("CREATE TABLE {linkchecker_links} (
        lid INT NOT NULL auto_increment,
        token VARCHAR(32) NOT NULL,
        url TEXT NOT NULL,
        method varchar(4) NOT NULL default 'HEAD',
        code INT NOT NULL default '0',
        error TEXT,
        fail_count INT NOT NULL default '0',
        last_checked INT NOT NULL default '0',
        PRIMARY KEY (lid),
        UNIQUE KEY token (token)
      ) /*!40100 DEFAULT CHARACTER SET utf8 */;");
      break;

    // Install PgSQL tables with update_5204 level! PgSQL was broken in
    // all older versions so we can expect nobody have used it. This allows not
    // to reinvent the complete upgrade process with all steps. Fully untested!
    case 'pgsql':
      $ret[] = update_sql("CREATE TABLE {linkchecker_boxes} (
        bid int_unsigned NOT NULL,
        lid int_unsigned NOT NULL,
        PRIMARY KEY (bid, lid)
      );");
      $ret[] = update_sql("CREATE TABLE {linkchecker_nodes} (
        nid int_unsigned NOT NULL,
        lid int_unsigned NOT NULL,
        PRIMARY KEY (nid, lid)
      );");
      $ret[] = update_sql("CREATE TABLE {linkchecker_comments} (
        cid int_unsigned NOT NULL,
        lid int_unsigned NOT NULL,
        PRIMARY KEY (cid, lid)
      );");
      $ret[] = update_sql("CREATE TABLE {linkchecker_links} (
        lid int_unsigned NOT NULL,  
        token VARCHAR(32) NOT NULL,
        url TEXT NOT NULL,
        method VARCHAR(4) NOT NULL default 'HEAD',
        code INTEGER NOT NULL default '-1',
        error TEXT,
        fail_count INTEGER NOT NULL default '0',
        last_checked INTEGER NOT NULL default '0',
        PRIMARY KEY (lid),
        UNIQUE (token)
      );");
      break;
  }

  // Upgrade settings. Could be less code, but is easier to follow.
  $ignore_response_codes = preg_split('/(\r\n?|\n)/', variable_get('linkchecker_ignore_responses', "200\n304\n401\n403"));

  // Filter all invalid responds codes and outdated error messages out.
  $ignore_response_codes = array_filter($ignore_response_codes, '_linkchecker_isvalid_response_code');

  // Make sure we have status code 200 and 304 in the ignore list.
  $ignore_response_codes = array_merge(array('200', '304'), $ignore_response_codes);
  $ignore_response_codes = array_unique($ignore_response_codes);

  variable_set('linkchecker_ignore_response_codes', implode("\n", $ignore_response_codes));
  $ret[] = array('success' => TRUE, 'query' => 'Ignored response codes have been upgraded to '. implode(",", $ignore_response_codes));

  // Remove obsolete settings.
  variable_del('linkchecker_ignore_responses');
  variable_del('linkchecker_rebuild');
  variable_del('linkchecker_maxtime');
  variable_del('linkchecker_socket_timeout');
  variable_del('linkchecker_max_links_per_node');
  variable_del('linkchecker_remove_after');
  variable_del('linkchecker_give_up');

  // D5 required job_queue.module. We need to make sure both is active.
  if (!module_exists('job_queue')) {
    module_disable(array('linkchecker'));
    drupal_set_message('The required job_queue module is missing. The linkchecker module has been disabled. Install job_queue module and re-enable linkchecker, please.', 'error');
  }

  return $ret;
}

/**
 * Install linkchecker_comments table.
 */
function linkchecker_update_5201() {
  $ret = array();

  // Create new tables.
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("CREATE TABLE {linkchecker_comments} (
        cid INT NOT NULL,
        lid INT NOT NULL,
        PRIMARY KEY (cid ,lid)
      ) /*!40100 DEFAULT CHARACTER SET utf8 */;");
      break;

    // PgSQL has been installed in 5200!
  }

  return $ret;
}

/**
 * Remove unnecessary elements from custom submit buttons.
 */
function linkchecker_update_5202() {
  $ret = array();

  variable_del('linkchecker_analyze');
  variable_del('linkchecker_clear_analyze');

  return $ret;
}

/**
 * Change default value for linkchecker_links.code to -1.
 *
 * fsockopen may return 0 as an indication that the error occurred before
 * the connect() call. This is most likely due to a problem initializing the
 * socket.
 */
function linkchecker_update_5203() {
  $ret = array();

  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("ALTER TABLE {linkchecker_links} MODIFY COLUMN `code` INT NOT NULL DEFAULT -1");
      break;

    // PgSQL has been installed in 5200!
  }

  return $ret;
}

/**
 * Make fields unsigned.
 */
function linkchecker_update_5204() {
  $ret = array();

  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("ALTER TABLE {linkchecker_links} CHANGE lid `lid` INT unsigned NOT NULL auto_increment");

      $ret[] = update_sql("ALTER TABLE {linkchecker_boxes} DROP PRIMARY KEY");
      $ret[] = update_sql("ALTER TABLE {linkchecker_boxes} CHANGE bid `bid` INT unsigned NOT NULL");
      $ret[] = update_sql("ALTER TABLE {linkchecker_boxes} CHANGE lid `lid` INT unsigned NOT NULL");
      $ret[] = update_sql("ALTER TABLE {linkchecker_boxes} ADD PRIMARY KEY (bid, lid)");

      $ret[] = update_sql("ALTER TABLE {linkchecker_comments} DROP PRIMARY KEY");
      $ret[] = update_sql("ALTER TABLE {linkchecker_comments} CHANGE cid `cid` INT unsigned NOT NULL");
      $ret[] = update_sql("ALTER TABLE {linkchecker_comments} CHANGE lid `lid` INT unsigned NOT NULL");
      $ret[] = update_sql("ALTER TABLE {linkchecker_comments} ADD PRIMARY KEY (cid, lid)");

      $ret[] = update_sql("ALTER TABLE {linkchecker_nodes} DROP PRIMARY KEY");
      $ret[] = update_sql("ALTER TABLE {linkchecker_nodes} CHANGE nid `nid` INT unsigned NOT NULL");
      $ret[] = update_sql("ALTER TABLE {linkchecker_nodes} CHANGE lid `lid` INT unsigned NOT NULL");
      $ret[] = update_sql("ALTER TABLE {linkchecker_nodes} ADD PRIMARY KEY (nid, lid)");
      break;

    // PgSQL has been installed in 5200!
  }

  return $ret;
}

/**
 * Remove wrong auto_increment from linkchecker_links.lid.
 */
function linkchecker_update_5205() {
  $ret = array();

  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("ALTER TABLE {linkchecker_links} MODIFY COLUMN `lid` INTEGER UNSIGNED NOT NULL");
      break;

    // PgSQL has been installed correctly in 5200!
  }

  return $ret;
}

/**
 * Remove any references to nodes that are not published and also remove their comments references.
 */
function linkchecker_update_5206() {
  $ret = array();

  $ret[] = update_sql("DELETE FROM {linkchecker_nodes} WHERE nid IN (SELECT nid FROM {node} WHERE status = 0)");
  $ret[] = update_sql("DELETE FROM {linkchecker_comments} WHERE cid IN (SELECT c.cid FROM {node} n INNER JOIN {comments} c ON c.nid = n.nid WHERE n.status = 0)");

  return $ret;
}

/**
 * Add status column to links table.
 */
function linkchecker_update_5207() {
  $ret = array();

  $ret[] = update_sql("ALTER TABLE {linkchecker_links} ADD COLUMN `status` INTEGER NOT NULL DEFAULT 1");

  return $ret;
}
